/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* Reverse(struct ListNode*head,struct ListNode**tail,int k)
{
    struct ListNode *next = NULL;
    struct ListNode *prev = (*tail)->next;

    *tail = head;
    while(k)
    {
        next = (head)->next;
        (head)->next = prev;
        prev = head;
        head = next;
        k--;
    }
    return prev;
}

struct ListNode* reverseKGroup(struct ListNode *head, int k) 
{
    struct ListNode *temp = head;
    struct ListNode *current = head;
    int count = 0;

    if(!head || k <= 1)
        return head;

    while(temp)
    {
        count++;
        if(k == count)
        {   
            if(current == head) 
                head = Reverse(current,&temp,k);
            else
                current->next = Reverse(current->next,&temp,k);

            current = temp;
            count = 0;
        }
        temp = temp->next;
    }
    return head;
}
